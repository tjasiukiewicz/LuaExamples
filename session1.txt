$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> tab = {1, 2, 3}
> #tab
3
> tab[#tab + 1] = tab
> tab[1]
1
> tab[4]
table: 0x5bd6089eba10
> tab[4][1]
1
> tab[4][4][2]
2
> tab2 = { 10, 20, 30}
> tab[#tab + 1] = tab2
> tab[5][1]
10
> tab2[#tab2 + 1] = 40
> tab[5][4]
40
> os.exit()
$ vi init.lua
$ pwd
/home/user/LuaSzkolenie
$ export LUA_INIT="@/home/user/LuaSzkolenie/init.lua"
$ lua
Siema!
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> os.exit()
$ vi init.lua
$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> exit()
$ vi init.lua
$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> dir(os)
remove  function: 0x64211779d2b0
time    function: 0x64211779c9c0
tmpname function: 0x64211779abb0
setlocale       function: 0x6421177a1270
execute function: 0x64211779f290
exit    function: 0x642117798df0
date    function: 0x6421177a0700
rename  function: 0x64211779d310
getenv  function: 0x64211779d3b0
difftime        function: 0x642117798d90
clock   function: 0x642117798cf0
> exit()
$ vi init.lua
$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
my lua > exit()
$ vi init.lua
$ vi prog1.lua
$ cat prog1.lua
function hello()
        print("Hello World!")
end

hello()
$ lua ./prog1.lua
Hello World!
$ vi prog1.lua
$ type lua5.4
lua5.4 jest /usr/bin/lua5.4
$ vi prog1.lua
$ chmod +x prog1.lua
$ ./prog1.lua
Hello World!
$ vi prog1.lua
$ vi prog1.lua
$ alias lua="lua5.4"
$ lua -i prog1.lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> hello()
Hello World!
> exit()
$ lua -l prog1 -i
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> hello()
Hello World!
> exit()
$ lua -e "print(math.pi)"
3.1415926535898
as@kraken:~/LuaSzkolenie $ lua -l prog1 -e "hello()"
Hello World!
$ lua -l prog1 -e "hello()"
Hello World!
$ lua -l prog1
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> hello()
Hello World!
> exit()
$ vi prog1.lua
$ lua -l prog1
Hello World!
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> exit
function: 0x5bc262ed8140
> exit()
$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> dofile("prog1.lua")
Hello World!
> exit()
$ vi arg_prog.lua
$ lua arg_prog.lua a b c
lua5.4
arg_prog.lua
a
b
$ vi arg_prog.lua
$ lua -l prog1 arg_prog.lua a b c
Hello World!
-l
prog1
arg_prog.lua
a
b
$
$
$
$ vi prog2.lua
$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> nil
nil
> 2 + 3
5
> =2 + 3
5
> nil == false
false
> function two()
>> return 1, 2
>> end
> a, b =  two()
> a
1
> b
2
> a, b, c =  two()
> c
nil
> type(true)
boolean
> type(type(true))
string
> msg = "ala ma asa"
> type(msg)
string
> #msg
10
> msg = "żółtko"
> #msg
9
> utf8.len(msg)
6
> type(two)(
>> end
stdin:2: unexpected symbol near 'end'
> type(two)
function
> tbl = {}
> type(tbl)
table
> #tbl
0
> print(x)
nil
> x = x or 12
> x
12
> function add(a, b)
>> local a = a or 0
>> local b = b or 0
>> return a + b
>> end
> add()
0
> add(1)
1
> add(2, 3)
5
> a = 12
> a^23
6.6247372669492e+24
> a~23
27
> ~1
-2
>  0 | 16
16
>  0 & 16
0
> not 16
false
> exit()
$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> a = 17
> a - 1
16
> a & (a - 1)
16
> a = 16
> a & (a - 1)
0
> exit()
$ vi rounded_two.lua
$ lua rounded_two.lua
15      false
16      true
18      false
$ vi rounded_two.lua
$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> 1 << 1
2
> 1 << 3
8
> 20 >> 3
2
> a = 1
> b = 2
> a and b
2
> a or b
1
> false or b
2
> x = 10
> ((x > 20) and a)
false
> ((x > 20) and a) or b
2
> (x > 20) and a or b
2
> (x > 20) and "prawda" or "fałsz"
fałsz
> (x > 20)
false
> -- test ? prawda: fałsz
> test and "prawda" or "fałsz"^C
$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> tbl = {}
> type(tbl)
table
> tbl[1] = "ala"
> tbl[2] = "ma"
> tbl[3] = "kota"
> #tbl
3
> tbl["info"] = "xyz"
> #tbl
3
> tbl["info"]
xyz
> tbl.info
xyz
> tbl.1
stdin:1: syntax error near '.1'
> tbl = { 1, 2, 3, info = "xyz"}
> tbl[100] = "ble"
> #tbl
3
> tbl[100]
ble
> tbl2 = {}
> tbl2[2] = "cos"
> tbl2[10] = "cos2"
> #tbl2
0
> b = table.pack(tbl2)
> b.n
1
> tbl = { 1, 2, 3, ["info"] = "xyz"}
> tbl.info
xyz
> tbl = { 1, 2, 3, ["info"] = "xyz", function () end }
> dir(tbl)
1       1
2       2
3       3
4       function: 0x62dc3ec84140
info    xyz
> person = { name = "Adam", age = 12, salary = 123.4 }
> #person
0
> for k, v in pairs(person) do
>> print(k, v)
>> end
name    Adam
age     12
salary  123.4
> for k, v in pairs(person) do
print(k, v)
end
name    Adam
age     12
salary  123.4
> for k, v in pairs(person) do
print(k, v)
end
name    Adam
age     12
salary  123.4
> for k, v in pairs(person) do
print(k, v)
end
name    Adam
age     12
salary  123.4
> for k, v in ipairs(person) do
print(k, v)
end
> tbl = { 10, { 100, 200, 300 }, person }
> E = {}
> ((parent or E).child or E).toy
nil
> for k, v in pairs(os) do
>> print(k, v)
>> end
getenv  function: 0x62dc3d2d43b0
execute function: 0x62dc3d2d6290
exit    function: 0x62dc3d2cfdf0
tmpname function: 0x62dc3d2d1bb0
rename  function: 0x62dc3d2d4310
date    function: 0x62dc3d2d7700
clock   function: 0x62dc3d2cfcf0
difftime        function: 0x62dc3d2cfd90
time    function: 0x62dc3d2d39c0
setlocale       function: 0x62dc3d2d8270
remove  function: 0x62dc3d2d42b0
> for k, v in pairs(math) do
print(k, v)
end
rad     function: 0x62dc3d2d1440
max     function: 0x62dc3d2d8640
atan    function: 0x62dc3d2d0020
abs     function: 0x62dc3d2d0660
huge    inf
tointeger       function: 0x62dc3d2d0700
tanh    function: 0x62dc3d2d1690
frexp   function: 0x62dc3d2d0580
min     function: 0x62dc3d2d8570
sinh    function: 0x62dc3d2d15d0
ldexp   function: 0x62dc3d2d0600
fmod    function: 0x62dc3d2d0a10
pow     function: 0x62dc3d2d0520
ceil    function: 0x62dc3d2d01a0
pi      3.1415926535898
mininteger      -9223372036854775808
log10   function: 0x62dc3d2d1760
deg     function: 0x62dc3d2d1370
cos     function: 0x62dc3d2d0eb0
type    function: 0x62dc3d2d0b20
sin     function: 0x62dc3d2d0de0
modf    function: 0x62dc3d2d0290
log     function: 0x62dc3d2d0410
sqrt    function: 0x62dc3d2d11d0
cosh    function: 0x62dc3d2d1510
acos    function: 0x62dc3d2d1110
asin    function: 0x62dc3d2d1050
ult     function: 0x62dc3d2cfd30
randomseed      function: 0x62dc3ec43d30
maxinteger      9223372036854775807
random  function: 0x62dc3ec43cf0
tan     function: 0x62dc3d2d0f80
atan2   function: 0x62dc3d2d0020
floor   function: 0x62dc3d2d00b0
exp     function: 0x62dc3d2d12b0
> for k, v in pairs(table) do
print(k, v)
end
pack    function: 0x62dc3d2de0e0
insert  function: 0x62dc3d2de380
sort    function: 0x62dc3d2dea00
concat  function: 0x62dc3d2de810
move    function: 0x62dc3d2de610
remove  function: 0x62dc3d2de4b0
unpack  function: 0x62dc3d2dd960
> tbl = { 1, 2, 3}
> table.insert(tbl, 10)
> dir(tbl)
1       1
2       2
3       3
4       10
> table.insert(tbl, 20)
> dir(tbl)
1       1
2       2
3       3
4       10
5       20
> table.insert(tbl, 1, 40)
> dir(tbl)
1       40
2       1
3       2
4       3
5       10
6       20
> tbl[#tbl + 1] = "last element"
> dir(tbl)
1       40
2       1
3       2
4       3
5       10
6       20
7       last element
> dir(tbl)
1       40
2       1
3       2
4       3
5       10
6       20
7       last element
> table.remove(tbl)
last element
> dir(tbl)
1       40
2       1
3       2
4       3
5       10
6       20
> dir(tbl, 2)
1       40
2       1
3       2
4       3
5       10
6       20
> dir(tbl, 1)
1       40
2       1
3       2
4       3
5       10
6       20
> table.remove(tbl, 1)
40
> dir(tbl, 1)
1       1
2       2
3       3
4       10
5       20
> dir(tbl)
1       1
2       2
3       3
4       10
5       20
> table.move(tbl, 1, #tbl, 2)
table: 0x62dc3ec42210
> tbl2 = table.move(tbl, 1, #tbl, 2)
> dir(tbl2)
1       1
2       1
3       1
4       2
5       3
6       10
7       20
> dir(tbl)
1       1
2       1
3       1
4       2
5       3
6       10
7       20
> tbl3 = {}
> table.move(tbl, 1, #tbl, #tbl3 + 1, tbl3)
table: 0x62dc3ec878e0
> dir(tbl3)
1       1
2       1
3       1
4       2
5       3
6       10
7       20
> tbl = { 1, 2, 3}
> table.insert(tbl, 1, 10)
> dir(tbl)
1       10
2       1
3       2
4       3
> dir(tbl)
1       10
2       1
3       2
4       3
> table.insert(tbl, 1, 100, 200)
stdin:1: wrong number of arguments to 'insert'
stack traceback:
        [C]: in function 'table.insert'
        stdin:1: in main chunk
        [C]: in ?
> table.insert(tbl, 1, 200)
> dir(tbl)
1       200
2       10
3       1
4       2
5       3
> dir(table)
pack    function: 0x62dc3d2de0e0
insert  function: 0x62dc3d2de380
sort    function: 0x62dc3d2dea00
concat  function: 0x62dc3d2de810
move    function: 0x62dc3d2de610
remove  function: 0x62dc3d2de4b0
unpack  function: 0x62dc3d2dd960
> tbl = { 10, 32, 1, 23}
> table.sort(tbl)
> dir(tbl)
1       1
2       10
3       23
4       32
> exit()
$
$ ls
  arg_prog.lua  init.lua  prog1.lua*  prog2.lua  rounded_two.lua  wstęp.txt
$ vi function_map.lua
$ lua
lua@     lua5.4   luac@    luac5.4
$ lua function_map.lua
$ vi function_map.lua
$ lua function_map.lua
1
2       3       4
$ vi function_map.lua
$ lua function_map.lua
1
table: 0x64043ef8a860
$ vi function_map.lua
$ lua function_map.lua
1
1       2
2       3
3       4
n       3
$ vi function_map.lua
$ lua function_map.lua
10      20
$ vi function_map.lua
$ lua function_map.lua
10      20      nil
$ vi function_map.lua
$ lua function_map.lua
10      20      nil
$ vi function_map.lua
$ lua function_map.lua
10      30
$ vi function_map.lua
$ lua function_map.lua
13
$ vi function_map.lua
$ lua
lua@     lua5.4   luac@    luac5.4
$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> local a = 12
> print(a)
nil
> exit()
$ vi function_map.lua
$ lua function_map.lua
30
2
3
nil
nil
$ vi function_map.lua
$ lua function_map.lua
30
1
2
nil
nil
$ vi function_map.lua
$ lua function_map.lua
30
1
nil
nil
nil
$ vi function_map.lua
$ lua function_map.lua
30
1
2
nil
nil
$ vi function_map.lua
$ lua function_map.lua
30
1
2
3
nil
$ vi function_map.lua
$ lua function_map.lua
30
5       2       2
function: 0x60ba80241e30
$ vi function_map.lua
$ lua function_map.lua
30
5       2       2
5
$ vi function_map.lua
$ lua function_map.lua
30
5       2       2
5
$ vi function_map.lua
$ lua function_map.lua
30
5       2       2
5
$ vi function_map.lua
$ lua function_map.lua
30
log:    5       2       2
5
$ vi function_map.lua
$ vi function_prive.lua
$ lua fu
...map.lua    ...prive.lua
$ lua function_prive.lua
1       12.3
2       24.6
3       36.9
$ vi function_prive.lua
$ lua function_prive.lua
lua5.4: function_prive.lua:8: attempt to call a nil value (local 'func')
stack traceback:
        function_prive.lua:8: in function 'calc_price'
        function_prive.lua:21: in main chunk
        [C]: in ?
$ vi function_prive.lua
$ lua function_prive.lua
1       12.3
2       24.6
3       36.9
$ vi function_prive.lua
$ lua function_prive.lua
1       12.3
2       24.6
3       36.9
$ vi function_map.lua
$ lua function_prive.lua
1       12.3
2       24.6
3       36.9
$ vi fu
...map.lua    ...prive.lua
$ vi function_prive.lua
$ vi pack_unpck.lua
$ lua pack_unpck.lua
1       2
$ vi pack_unpck.lua
$ lua pack_unpck.lua
1       2
table: 0x5f00d14a8e50
$ vi pack_unpck.lua
$ mv pack_unpck.lua pack_unpack.lua
$ vi pack_unpack.lua
$ lua
lua@     lua5.4   luac@    luac5.4
$ lua pack_unpack.lua
1       2
table: 0x612e49f66e70
$ vi pack_unpack.lua
$ lua pack_unpack.lua
1       2
table: 0x5958097dbe10
1       table: 0x5958097dd6d0
n       1
$ vi pack_unpack.lua
$ lua pack_unpack.lua
1       2
table: 0x5fed4b876850
1       1
2       2
3       3
4       4
n       4
$ vi pack_unpack.lua
$ lua pack_unpack.lua
lua5.4: pack_unpack.lua:16: ')' expected near '='
$ vi pack_unpack.lua
$ lua pack_unpack.lua
1       2
table: 0x592e6d058420
1       1
2       2
3       3
4       4
n       4
1       1
2       2
3       3
n       3
$ vi pack_unpack.lua
$ lua pack_unpack.lua
lua5.4: pack_unpack.lua:32: syntax error near '1'
$ vi pack_unpack.lua
$ lua pack_unpack.lua
1       2
table: 0x5f8f15235da0
1       1
2       2
3       3
4       4
n       4
1       4
2       1
3       2
4       3
n       4
1
$ vi pack_unpack.lua
$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> msg1 = "ala"
> msg2 = "kot"
> result = msg1 .. msg2
> dir(string)
reverse function: 0x58e4847d3a40
char    function: 0x58e4847d3fb0
len     function: 0x58e4847d0410
format  function: 0x58e4847d81f0
dump    function: 0x58e4847d56e0
unpack  function: 0x58e4847d8e60
byte    function: 0x58e4847d0620
gmatch  function: 0x58e4847d1fb0
pack    function: 0x58e4847d79f0
find    function: 0x58e4847d0d40
sub     function: 0x58e4847d04a0
gsub    function: 0x58e4847d6990
match   function: 0x58e4847d0d50
upper   function: 0x58e4847d3c60
lower   function: 0x58e4847d3b50
rep     function: 0x58e4847d3d70
packsize        function: 0x58e4847d7360
> string.format("%x", 12)
c
> string.format("%0.12f", 12.12131)
12.121310000000
> string.format("%-10d", 12)
12
> string.format("%10d", 12)
        12
> string.dump("alallawe")
stdin:1: bad argument #1 to 'dump' (function expected, got string)
stack traceback:
        [C]: in function 'string.dump'
        stdin:1: in main chunk
        [C]: in ?
> string.dump(1,1,2)
stdin:1: bad argument #1 to 'dump' (function expected, got number)
stack traceback:
        [C]: in function 'string.dump'
        stdin:1: in main chunk
        [C]: in ?
> string.dump({1,1,2})
stdin:1: bad argument #1 to 'dump' (function expected, got table)
stack traceback:
        [C]: in function 'string.dump'
        stdin:1: in main chunk
        [C]: in ?
> string.dump(dir)
uaT

xV(w@@/home/user/LuaSzkolenie/init.lua
ƀpairsprinttbl(for state)(for state)(for state)(for state)kv_ENV
> dir(string)
reverse function: 0x58e4847d3a40
char    function: 0x58e4847d3fb0
len     function: 0x58e4847d0410
format  function: 0x58e4847d81f0
dump    function: 0x58e4847d56e0
unpack  function: 0x58e4847d8e60
byte    function: 0x58e4847d0620
gmatch  function: 0x58e4847d1fb0
pack    function: 0x58e4847d79f0
find    function: 0x58e4847d0d40
sub     function: 0x58e4847d04a0
gsub    function: 0x58e4847d6990
match   function: 0x58e4847d0d50
upper   function: 0x58e4847d3c60
lower   function: 0x58e4847d3b50
rep     function: 0x58e4847d3d70
packsize        function: 0x58e4847d7360
> string.byte("ala")
97
> msg ="ala"
> strig.byte(msg, 1, #msg)
stdin:1: attempt to index a nil value (global 'strig')
stack traceback:
        stdin:1: in main chunk
        [C]: in ?
> string.byte(msg, 1, #msg)
97      108     97
> exit()
$ vi numerology.lua
$ lua numerology.lua
lua5.4: numerology.lua:3: bad argument #1 to 'for iterator' (table expected, got number)
stack traceback:
        [C]: in function 'next'
        numerology.lua:3: in function 'add_ascii'
        numerology.lua:9: in main chunk
        [C]: in ?
$ vi numerology.lua
$ lua numerology.lua
663
$ vi numerology.lua
$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> dir(string)
match   function: 0x5a2425ba5d50
len     function: 0x5a2425ba5410
byte    function: 0x5a2425ba5620
find    function: 0x5a2425ba5d40
dump    function: 0x5a2425baa6e0
gsub    function: 0x5a2425bab990
format  function: 0x5a2425bad1f0
packsize        function: 0x5a2425bac360
gmatch  function: 0x5a2425ba6fb0
char    function: 0x5a2425ba8fb0
rep     function: 0x5a2425ba8d70
unpack  function: 0x5a2425bade60
upper   function: 0x5a2425ba8c60
sub     function: 0x5a2425ba54a0
pack    function: 0x5a2425bac9f0
lower   function: 0x5a2425ba8b50
reverse function: 0x5a2425ba8a40
> exit()
$ vi string_idioms.lua
$ lua string_idioms.lua
97      98      99      32      100     97      102
bc da
9
6
380
$ vi string_idioms.lua
$ lua string_idioms.lua
97      98      99      32      100     97      102
bc da
9
6
380
4       7
$ vi string_idioms.lua
$ lua string_idioms.lua
97      98      99      32      100     97      102
bc da
9
6
380
4       7
123
123
$ vi string_idioms.lua
$ lua string_idioms.lua
97      98      99      32      100     97      102
bc da
9
6
380
4       7
string
number
$ vi string_idioms.lua
$ vi rev_add.txt
$ ls
  arg_prog.lua        numerology.lua     prog2.lua          wstęp.txt
  function_map.lua    pack_unpack.lua    rev_add.txt
  function_prive.lua  palindrom_add.lua  rounded_two.lua
  init.lua            prog1.lua*         string_idioms.lua
$ vi palindrom_add.lua
$ lua palindrom_add.lua
  10:     1, 11
  11:     0, 11
  12:     1, 33
  13:     1, 44
  14:     1, 55
  15:     1, 66
  16:     1, 77
  17:     1, 88
  18:     1, 99
  19:     2, 121
  20:     1, 22
  21:     1, 33
  22:     0, 22
  23:     1, 55
  24:     1, 66
  25:     1, 77
  26:     1, 88
  27:     1, 99
  28:     2, 121
  29:     1, 121
  30:     1, 33
  31:     1, 44
  32:     1, 55
  33:     0, 33
  34:     1, 77
  35:     1, 88
  36:     1, 99
  37:     2, 121
  38:     1, 121
  39:     2, 363
  40:     1, 44
  41:     1, 55
  42:     1, 66
  43:     1, 77
  44:     0, 44
  45:     1, 99
  46:     2, 121
  47:     1, 121
  48:     2, 363
  49:     2, 484
  50:     1, 55
  51:     1, 66
  52:     1, 77
  53:     1, 88
  54:     1, 99
  55:     0, 55
  56:     1, 121
  57:     2, 363
  58:     2, 484
  59:     3, 1111
  60:     1, 66
  61:     1, 77
  62:     1, 88
  63:     1, 99
  64:     2, 121
  65:     1, 121
  66:     0, 66
  67:     2, 484
  68:     3, 1111
  69:     4, 4884
  70:     1, 77
  71:     1, 88
  72:     1, 99
  73:     2, 121
  74:     1, 121
  75:     2, 363
  76:     2, 484
  77:     0, 77
  78:     4, 4884
  79:     6, 44044
  80:     1, 88
  81:     1, 99
  82:     2, 121
  83:     1, 121
  84:     2, 363
  85:     2, 484
  86:     3, 1111
  87:     4, 4884
  88:     0, 88
  89:    24, 8813200023188
  90:     1, 99
  91:     2, 121
  92:     1, 121
  93:     2, 363
  94:     2, 484
  95:     3, 1111
  96:     4, 4884
  97:     6, 44044
  98:    24, 8813200023188
  99:     0, 99
 100:     1, 101
$ vi palindrom_add.lua
$ lua palindrom_add.lua
 100:     1, 101
 101:     0, 101
 102:     1, 303
 103:     1, 404
 104:     1, 505
 105:     1, 606
 106:     1, 707
 107:     1, 808
 108:     1, 909
 109:     2, 1111
 110:     1, 121
 111:     0, 111
 112:     1, 323
 113:     1, 424
 114:     1, 525
 115:     1, 626
 116:     1, 727
 117:     1, 828
 118:     1, 929
 119:     2, 1331
 120:     1, 141
 121:     0, 121
 122:     1, 343
 123:     1, 444
 124:     1, 545
 125:     1, 646
 126:     1, 747
 127:     1, 848
 128:     1, 949
 129:     2, 1551
 130:     1, 161
 131:     0, 131
 132:     1, 363
 133:     1, 464
 134:     1, 565
 135:     1, 666
 136:     1, 767
 137:     1, 868
 138:     1, 969
 139:     2, 1771
 140:     1, 181
 141:     0, 141
 142:     1, 383
 143:     1, 484
 144:     1, 585
 145:     1, 686
 146:     1, 787
 147:     1, 888
 148:     1, 989
 149:     2, 1991
 150:     2, 303
 151:     0, 151
 152:     2, 707
 153:     2, 909
 154:     2, 1111
 155:     3, 4444
 156:     3, 6666
 157:     3, 8888
 158:     3, 11011
 159:     2, 1221
 160:     2, 343
 161:     0, 161
 162:     2, 747
 163:     2, 949
 164:     3, 2662
 165:     3, 4884
 166:     5, 45254
 167:    11, 88555588
 168:     3, 13431
 169:     2, 1441
 170:     2, 383
 171:     0, 171
 172:     2, 787
 173:     2, 989
 174:     4, 5115
 175:     4, 9559
 176:     5, 44044
 177:    15, 8836886388
 178:     3, 15851
 179:     2, 1661
 180:     3, 747
 181:     0, 181
 182:     6, 45254
 183:     4, 13431
 184:     3, 2552
 185:     3, 4774
 186:     3, 6996
 187:    23, 8813200023188
 188:     7, 233332
 189:     2, 1881
 190:     7, 45254
$ vi palindrom_add.lua
$ lua palindrom_add.lua
 100:     1, 101
 101:     0, 101
 102:     1, 303
 103:     1, 404
 104:     1, 505
 105:     1, 606
 106:     1, 707
 107:     1, 808
 108:     1, 909
 109:     2, 1111
 110:     1, 121
 111:     0, 111
 112:     1, 323
 113:     1, 424
 114:     1, 525
 115:     1, 626
 116:     1, 727
 117:     1, 828
 118:     1, 929
 119:     2, 1331
 120:     1, 141
 121:     0, 121
 122:     1, 343
 123:     1, 444
 124:     1, 545
 125:     1, 646
 126:     1, 747
 127:     1, 848
 128:     1, 949
 129:     2, 1551
 130:     1, 161
 131:     0, 131
 132:     1, 363
 133:     1, 464
 134:     1, 565
 135:     1, 666
 136:     1, 767
 137:     1, 868
 138:     1, 969
 139:     2, 1771
 140:     1, 181
 141:     0, 141
 142:     1, 383
 143:     1, 484
 144:     1, 585
 145:     1, 686
 146:     1, 787
 147:     1, 888
 148:     1, 989
 149:     2, 1991
 150:     2, 303
 151:     0, 151
 152:     2, 707
 153:     2, 909
 154:     2, 1111
 155:     3, 4444
 156:     3, 6666
 157:     3, 8888
 158:     3, 11011
 159:     2, 1221
 160:     2, 343
 161:     0, 161
 162:     2, 747
 163:     2, 949
 164:     3, 2662
 165:     3, 4884
 166:     5, 45254
 167:    11, 88555588
 168:     3, 13431
 169:     2, 1441
 170:     2, 383
 171:     0, 171
 172:     2, 787
 173:     2, 989
 174:     4, 5115
 175:     4, 9559
 176:     5, 44044
 177:    15, 8836886388
 178:     3, 15851
 179:     2, 1661
 180:     3, 747
 181:     0, 181
 182:     6, 45254
 183:     4, 13431
 184:     3, 2552
 185:     3, 4774
 186:     3, 6996
 187:    23, 8813200023188
 188:     7, 233332
 189:     2, 1881
 190:     7, 45254
 191:     0, 191
 192:     4, 6996
 193:     8, 233332
 194:     3, 2992
 195:     4, 9339
lua5.4: palindrom_add.lua:7: attempt to perform arithmetic on a nil value
stack traceback:
        palindrom_add.lua:7: in function 'palindromic_add'
        palindrom_add.lua:17: in function 'calculate_palindromic_add'
        palindrom_add.lua:23: in main chunk
        [C]: in ?
$ vi palindrom_add.lua
$ vi palindrom_add.lua
$ lua palindrom_add.lua
 197:     7, 881188
 198:     5, 79497
 199:     3, 3113
 200:     1, 202
$ vi palindrom_add.lua
$ lua palindrom_add.lua
lua5.4: palindrom_add.lua:7: attempt to perform arithmetic on a nil value
stack traceback:
        palindrom_add.lua:7: in function 'palindromic_add'
        palindrom_add.lua:17: in function 'calculate_palindromic_add'
        palindrom_add.lua:23: in main chunk
        [C]: in ?
$ vi palindrom_add.lua
$ lua palindrom_add.lua
lua5.4: palindrom_add.lua:7: attempt to perform arithmetic on a nil value
stack traceback:
        palindrom_add.lua:7: in function 'palindromic_add'
        palindrom_add.lua:17: in function 'calculate_palindromic_add'
        palindrom_add.lua:23: in main chunk
        [C]: in ?
$ vi palindrom_add.lua
$ lua palindrom_add.lua
 197:    35, 69567677677676596
lua5.4: palindrom_add.lua:7: attempt to perform arithmetic on a nil value
stack traceback:
        palindrom_add.lua:7: in function 'palindromic_add'
        palindrom_add.lua:17: in function 'calculate_palindromic_add'
        palindrom_add.lua:23: in main chunk
        [C]: in ?
$ vi palindrom_add.lua
$ lua palindrom_add.lua
 197:    35, 69567677677676596
lua5.4: palindrom_add.lua:7: attempt to perform arithmetic on a nil value
stack traceback:
        palindrom_add.lua:7: in function 'palindromic_add'
        palindrom_add.lua:17: in function 'calculate_palindromic_add'
        palindrom_add.lua:23: in main chunk
        [C]: in ?
$ vi palindrom_add.lua
$ lua palindrom_add.lua
 190:    38, 69567677677676596
 191:    30, 147632343236741
lua5.4: palindrom_add.lua:7: attempt to perform arithmetic on a nil value
stack traceback:
        palindrom_add.lua:7: in function 'palindromic_add'
        palindrom_add.lua:17: in function 'calculate_palindromic_add'
        palindrom_add.lua:23: in main chunk
        [C]: in ?
$ vi palindrom_add.lua
$ vi simple_io.lua
$ lua simple_io.lua
Enter name: Tomasz
Tomasz
$ vi simple_io.lua
$ lua simple_io.lua
Enter name: Tomasz
Name:   Tomasz
Enter age: 18
Age:    18
$ vi simple_io.lua
$ vi answer.txt
$ lua simple_io.lua < answer.txt
Enter name: Name:       Tomasz
Enter age: Age: 18
$ cat answer.txt
Tomasz
18

$ cat answer.txt | lo
loadavg         localc          localedef       loffice         login           logrotate       look            lowriter
loadkeys        locale          locale-gen      lofromtemplate  loginctl        logsave         losetup
loadunimap      locale-check    locate@         logger          logname         loimpress       loweb
local           localectl       lodraw          logilab-pytest  logout          lomath          lowntfs-3g
$ cat answer.txt | lu
lua@     lua5.4   luac@    luac5.4  luit
$ cat answer.txt | lua simple_io.lua
Enter name: Name:       Tomasz
Enter age: Age: 18
$ vi answer.txt
$ vi simple_io.lua
$ vi to_file_io.lua
$ lua to_file_io.lua
ala ma asa
$ vi to_file_io.lua
$ lua to_file_io.lua
$ cat answer.txt
Tomasz
18

$ vi to_file_io.lua
$ cat re
result.txt   rev_add.txt
$ cat result.txt
ala ma asa$ vi to_file_io.lua
$ lua to_file_io.lua
$ vi to_file_io.lua
$ lua to_file_io.lua
to console$
$ vi to_file_io.lua
$ vi simple_io.lua
$ vi lines.txt
$ vi iter_io.lua
$ lua i
init.lua     iter_io.lua
$ lua iter_io.lua
to
są
dane
w
liniach

$ vi iter_io.lua
$ lua iter_io.lua
lua5.4: attempt to index a function value
stack traceback:
        [C]: in for iterator 'for iterator'
        iter_io.lua:3: in main chunk
        [C]: in ?
$ vi iter_io.lua
$ lua iter_io.lua
1       to
2       są
3       dane
4       w
5       liniach
6
$ vi iter_io.lua
$ lua iter_io.lua
1
2       dane
3       liniach
4       są
5       to
6       w
$ vi iter_io.lua
$ lua
Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio
> "14" .. "10"
1410
> "14" .. 10
1410
> 13.2 / 3
4.4
> 13.2 // 3
4.0
> val1 = 12
> val2 = 13.2
> type(val1)
number
> type(val2)
number
> math.type(val1)
integer
> math.type(val2)
float
> 12 % 3
0
> 12 % 5
2
> 12.3 % 5
2.3
> a = 123
> b = 5
> a % b
3
> a % b == a - ((a / b) * b)
false
> a % b == a - ((a // b) * b)
true
> math.pi
3.1415926535898
> math.pi % 0.01
0.0015926535897931
> math.pi % 0.1
0.041592653589793
> math.pi - math.pi % 0.1
3.1
> math.pi - math.pi % 0.01
3.14
> math.pi - math.pi % 0.002
3.14
> math.pi - math.pi % 0.2
3.0
> math.random()
0.12650061962536
> math.random()
0.34574253701272
> math.random()
0.40370966110719
> math.random(3)
2
> math.random(3)
1
> math.random(3)
1
> math.random(3)
1
> math.random(3)
3
> math.random(1, 5)
3
> math.random(1, 5)
5
> math.random(1, 5)
3
> math.random(1, 5)
2
> math.random(1, 5)
2
> math.random(os.time)
stdin:1: bad argument #1 to 'random' (number expected, got function)
stack traceback:
        [C]: in function 'math.random'
        stdin:1: in main chunk
        [C]: in ?
> math.random(os.time())
78430635
> math.random(os.time())
520439200
> math.random(os.time())
741575226
> math.randomsed(os.time())
stdin:1: attempt to call a nil value (field 'randomsed')
stack traceback:
        stdin:1: in main chunk
        [C]: in ?
> math.randseed(os.time())
stdin:1: attempt to call a nil value (field 'randseed')
stack traceback:
        stdin:1: in main chunk
        [C]: in ?
> math.randomseed(os.time())
1731595417      0
> math.randomseed(os.time())
1731595419      0
> math.random()
0.61721672867309
> math.random()
0.71137158943602
> math.random()
0.10136094654334
> math.randomseed(42)
42      0
> math.random()
0.93081217803957
> math.randomseed(10)
10      0
> math.random()
0.46756135625568
> math.randomseed(42)
42      0
> math.random()
0.93081217803957
> 0xa.bp2
42.75
> 0xa2
162
> 0x12
18
> 0x1p2
4.0
> string.format("%a", 123)
0x1.ecp+6
> val = string.format("%a", 123)
> val
0x1.ecp+6
> type(val)
string
> tonumber(val)
123.0
> exit()
$
$ ls
  answer.txt          iter_io.lua        prog1.lua*       simple_io.lua
  arg_prog.lua        lines.txt          prog2.lua        string_idioms.lua
  function_map.lua    numerology.lua     result.txt       to_file_io.lua
  function_prive.lua  pack_unpack.lua    rev_add.txt      wstęp.txt
  init.lua            palindrom_add.lua  rounded_two.lua
$
